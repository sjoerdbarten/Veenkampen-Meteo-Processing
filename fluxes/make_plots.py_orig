import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as dates
from datetime import timedelta
import numpy as np

outdir = 'C:/veenkampen/fluxes/graphs/cur/'
FS = 20
fg_all = pd.read_csv('Eddyflux.csv',header=0)
fg_all['datetime'] = pd.to_datetime(fg_all['date'] + ' '+fg_all['time'])+pd.Timedelta(minutes=15)

def make_plot_fluxes(startdate):

  FS = 20

  stop = startdate
  start = pd.to_datetime(stop+timedelta(hours=-24))

  fg = fg_all.loc[fg_all['datetime'] > start]
  fg['H'] = fg['H'].where(fg['H'] > -100.,np.nan)
  fg['LE'] = fg['LE'].where(fg['LE'] > -100.,np.nan)

  fig,ax = plt.subplots()
  ax.plot(fg['datetime'],fg['H'],color='tab:orange',lw=2,label = 'H')
  ax.plot(fg['datetime'],fg['LE'],color='tab:green',lw=2,label = 'LE')

  fg_H = fg.loc[fg['qc_H' ] == 0]
  ax.plot(fg_H['datetime'],fg_H['H'],marker='*',color='tab:orange',markersize=12,lw=0,label='qc == 0')
  fg_H = fg.loc[fg['qc_H' ] == 1]
  ax.plot(fg_H['datetime'],fg_H['H'],marker='d',color='tab:orange',markersize=12,lw=0,label='qc == 1')
  fg_H = fg.loc[fg['qc_H' ] == 2]
  ax.plot(fg_H['datetime'],fg_H['H'],marker='o',color='tab:orange',markersize=12,lw=0,label='qc == 2')

  fg_LE = fg.loc[fg['qc_LE' ] == 0]
  ax.plot(fg_LE['datetime'],fg_LE['LE'],marker='*',color='tab:green',markersize=12,lw=0) # label='qc == 0')
  fg_LE = fg.loc[fg['qc_LE' ] == 1]
  ax.plot(fg_LE['datetime'],fg_LE['LE'],marker='d',color='tab:green',markersize=12,lw=0) # ,label='qc == 1')
  fg_LE = fg.loc[fg['qc_LE' ] == 2]
  ax.plot(fg_LE['datetime'],fg_LE['LE'],marker='o',color='tab:green',markersize=12,lw=0) # ,label='qc == 2')

  ax.xaxis.set_minor_locator(dates.HourLocator(interval=1))
  ax.xaxis.set_minor_formatter(dates.DateFormatter('%H'))
  ax.xaxis.set_major_locator(dates.DayLocator(interval=1))
  ax.xaxis.set_major_formatter(dates.DateFormatter('\n %d %b %Y'))

  ax.set_ylabel('$W m^{-2}$',fontsize=16)
  ax.set_xlabel('UTC',fontsize=16)
  ax.set_xlim([start,fg['datetime'].values[-1]])
  leg = ax.legend()
  leg.legendHandles[2].set_color('black')
  leg.legendHandles[3].set_color('black')
  leg.legendHandles[4].set_color('black')

  for item in ([ax.xaxis.label, ax.yaxis.label ] + ax.get_xticklabels(which='major') + ax.get_yticklabels() + ax.get_legend().get_texts()): item.set_fontsize(FS)

  size = fig.get_size_inches()
  fig.set_size_inches(1.5*size)
  plt.tight_layout()
  plt.savefig(outdir+'Fluxes.png',format='png')

def make_plot_co2_h2o_flux(startdate):
  
  stop = startdate
  start = pd.to_datetime(stop+timedelta(hours=-24))

  fg = fg_all.loc[fg_all['datetime'] > start]
  fg['co2_flux'] = fg['co2_flux'].where(fg['co2_flux'] > -100.,np.nan)
  fg['h2o_flux'] = fg['h2o_flux'].where(fg['h2o_flux'] > -100.,np.nan)

  fig,ax = plt.subplots()
  lns1 = ax.plot(fg['datetime'],fg['co2_flux'],color='tab:orange',lw=2,label = '$CO_2$')
  ax.set_ylabel('$CO_2$ flux [$\mu$mol $m^{-2}$ $s^{-1}$]')
  
  ax2 = ax.twinx()
  lns2 = ax2.plot(fg['datetime'],fg['h2o_flux'],color='tab:green',lw=2,label = '$H_2O$')
  ax2.set_ylabel('$H_2O$ flux [mmol $m^{-2}$ $s^{-1}$]')

  fg_co2 = fg.loc[fg['qc_co2_flux' ] == 0]
  lns3 = ax.plot(fg_co2['datetime'],fg_co2['co2_flux'],marker='*',color='tab:orange',markersize=12,lw=0,label='qc == 0')
  fg_co2 = fg.loc[fg['qc_co2_flux' ] == 1]
  lns4 = ax.plot(fg_co2['datetime'],fg_co2['co2_flux'],marker='d',color='tab:orange',markersize=12,lw=0,label='qc == 1')
  fg_co2 = fg.loc[fg['qc_co2_flux' ] == 2]
  lns5 = ax.plot(fg_co2['datetime'],fg_co2['co2_flux'],marker='o',color='tab:orange',markersize=12,lw=0,label='qc == 2')

  fg_h2o = fg.loc[fg['qc_h2o_flux' ] == 0]
  ax2.plot(fg_h2o['datetime'],fg_h2o['h2o_flux'],marker='*',color='tab:green',markersize=12,lw=0) # label='qc == 0')
  fg_h2o = fg.loc[fg['qc_h2o_flux' ] == 1]
  ax2.plot(fg_h2o['datetime'],fg_h2o['h2o_flux'],marker='d',color='tab:green',markersize=12,lw=0) # ,label='qc == 1')
  fg_h2o = fg.loc[fg['qc_h2o_flux' ] == 2]
  ax2.plot(fg_h2o['datetime'],fg_h2o['h2o_flux'],marker='o',color='tab:green',markersize=12,lw=0) # ,label='qc == 2')

  ax.xaxis.set_minor_locator(dates.HourLocator(interval=1))
  ax.xaxis.set_minor_formatter(dates.DateFormatter('%H'))
  ax.xaxis.set_major_locator(dates.DayLocator(interval=1))
  ax.xaxis.set_major_formatter(dates.DateFormatter('\n %d %b %Y'))

  ax.set_xlabel('UTC',fontsize=16)
  ax.set_xlim([start,fg['datetime'].values[-1]])
  labs = [l.get_label() for l in lns1+lns2+lns3+lns4+lns5]
  leg = ax.legend(lns1+lns2+lns3+lns4+lns5,labs,loc='best')
  leg.legendHandles[2].set_color('black')
  leg.legendHandles[3].set_color('black')
  leg.legendHandles[4].set_color('black')

#for tick in ax.xaxis.get_major_ticks():
#     tick.label1.set_fontweight('bold')
  
  for item in ([ax.xaxis.label, ax.yaxis.label,ax2.yaxis.label ] + ax.get_xticklabels(which='major') + ax.get_yticklabels() + ax.get_legend().get_texts()): item.set_fontsize(FS)
  
  size = fig.get_size_inches()
  fig.set_size_inches(1.5*size)
  plt.tight_layout()
  plt.savefig(outdir+'co2h20flux.png',format='png')

def make_plot_co2_h2o_conc(startdate):

  stop = startdate
  start = pd.to_datetime(stop+timedelta(hours=-24))
  fg = fg_all.loc[fg_all['datetime'] > start]
  fg['co2_mole_fraction'] = fg['co2_mole_fraction'].where(fg['co2_mole_fraction'] > -100.,np.nan)
  fg['h2o_mole_fraction'] = fg['h2o_mole_fraction'].where(fg['h2o_mole_fraction'] > -100.,np.nan)

  fig,ax = plt.subplots()
  lns1 = ax.plot(fg['datetime'],fg['co2_mole_fraction'],color='tab:orange',lw=2,label = '$CO_2$')
  ax.set_ylabel('$CO_2$ conc [ppm]')
  ax2 = ax.twinx()
  lns2 = ax2.plot(fg['datetime'],fg['h2o_mole_fraction'],color='tab:green',lw=2,label = '$H_2O$')
  ax2.set_ylabel('$H_2O$ conc [ppt]')
  
  ax.xaxis.set_minor_locator(dates.HourLocator(interval=1))
  ax.xaxis.set_minor_formatter(dates.DateFormatter('%H'))
  ax.xaxis.set_major_locator(dates.DayLocator(interval=1))
  ax.xaxis.set_major_formatter(dates.DateFormatter('\n %d %b %Y'))

  ax.set_xlabel('UTC',fontsize=16)
  ax.set_xlim([start,fg['datetime'].values[-1]])
  labs = [l.get_label() for l in lns1+lns2]
  leg = ax.legend(lns1+lns2,labs,loc='best')

#for tick in ax.xaxis.get_major_ticks():
#     tick.label1.set_fontweight('bold')
  for item in ([ax.xaxis.label, ax.yaxis.label,ax2.yaxis.label ] + ax.get_xticklabels(which='major') + ax.get_yticklabels() + ax.get_legend().get_texts()): item.set_fontsize(FS)

  size = fig.get_size_inches()
  fig.set_size_inches(1.5*size)
  plt.tight_layout()
  plt.savefig(outdir+'co2h2oconc.png',format='png')